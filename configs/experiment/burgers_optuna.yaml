# @package _global_

defaults:
  - override /data: burgers
  - override /model: operatorformer
  - override /callbacks: default
  - override /trainer: ddp
  - override /logger: aim
  - override /hydra: slurm
  - override /hydra/sweeper: optuna

task_name: "Optuna_Burgers_1D"

tags: ["burgers1d", "optuna"]

seed: 114514

trainer:
  min_epochs: 1000
  max_epochs: 1000
  check_val_every_n_epoch: 1
  detect_anomaly: False
  deterministic: True

model:
  optimizer:
    lr: 8e-4
  compile: false
  net:
    input_encoder_config:
      attn_type: "galerkin"
      nhead: 1
      num_layers: 4
      scale: [8, 4, 4, 2]

data:
  batch_size: 16
  train_val_test_split: [1_024, 100, 200]

logger:
  aim:
    experiment: ${task_name}
    run_name: "exp_${hydra:job.num}"

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/relative_error_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 6

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 500

    max_failure_rate: 0.5

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 114514
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(1.0e-5, 0.1)
      data.batch_size: choice(8, 16, 32, 64)
      model.net.input_encoder_config.nhead: choice(1, 2, 4, 8)
      model.net.input_encoder_config.scale: choice(4)
      model.net.input_encoder_config.num_layers: choice(1, 2, 4, 8)
      model.net.input_encoder_config.activation: choice("gelu", "geglu")
